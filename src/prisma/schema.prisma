// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id Int @id @default(autoincrement())
  name String @db.VarChar(256)
  email String @unique 
  password String 
  dateOfBirth DateTime @db.Date
  profileImage String? @default("null")
  timeStamp DateTime @default(now())
  likes Likes[]
  playlist Playlists[]
}

model Artists{
  id Int @id @default(autoincrement())
  name String @db.VarChar(256)
  genere String @db.VarChar(50)
  imageUrl String?
  albums Albums[]
}

model Albums{
  id Int @id @default(autoincrement())
  artists Artists @relation(fields: [artistId],references: [id])
  artistId Int
  name String @unique @db.VarChar(50)
  releaseDate DateTime @default(now())
  imageUrl String?
  Tracks Tracks []
}

model Tracks {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  albumId Int
  duration Float 
  album Albums @relation(fields: [albumId],references: [id])
  playlist  Playlists[]
  likes Likes[]
}

model Playlists {
  id Int @id @default(autoincrement())
  user Users @relation(fields: [userId],references: [id])
  userId Int
  name String @db.VarChar(50)
  imageUrl String?
  track Tracks[]
  playlist_Track Playlist_Track[]
}

model Playlist_Track{
  id Int @id @default(autoincrement())
  playlist Playlists @relation(fields: [playlistId], references: [id])
  playlistId Int 
  order Int
}

model Likes {
  id Int @id @default(autoincrement())
  timestamp DateTime @default(now())
  trackId Int
  track Tracks @relation(fields: [trackId], references: [id])
  userId Int
  users Users @relation(fields: [userId], references: [id])
  
}